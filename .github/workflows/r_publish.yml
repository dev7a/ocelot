name: Publisher

on:
  workflow_call:
    inputs:
      artifact-name:
        description: 'This should correspond to a actions/upload-artifact name earlier in the build. The file name and the name of the artifact containing it must be equal.'
        required: true
        type: string
      layer-name:
        description: 'Layer name not including other parts like arch or version.'
        required: true
        type: string
      architecture:
        description: '(optional) amd64 or arm64'
        required: false
        type: string
      runtimes:
        description: '(optional) a space delimited list of compatible runtimes (from https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html)'
        required: false
        type: string
      release-group:
        description: 'Release to dev or prod? "prod" yields empty value. (Default: dev)'
        required: true
        default: dev
        type: string
      aws-region:
        description: 'Publish to which AWS region?'
        required: true
        type: string
      dynamodb-region:
        description: 'Region of the DynamoDB table'
        required: true
        type: string
      layer-version:
        description: '(optional) Layer version to be used in the layer name. If no input is given, its value is tried to be extracted from the `GITHUB_REF_NAME` variable'
        required: false
        type: string
      distribution:
        description: 'Distribution name to be included in the layer name'
        required: false
        type: string
        default: 'default'
      collector-version:
        description: 'Version of the OpenTelemetry collector (read from VERSION file)'
        required: false
        type: string
      build-tags:
        description: 'Comma-separated build tags used for the build'
        required: false # Make optional in case it's not passed for some reason
        type: string
        default: ''
      make-public:
        description: 'Whether to make the layer publicly accessible'
        required: false
        type: string
        default: 'false'
      dry-run:
        description: 'Whether to perform a dry run (no actual publishing)'
        required: false
        type: string
        default: 'false'
    outputs:
      layer_arn:
        description: 'ARN of the published or reused layer'
        value: ${{ jobs.publish_layer.outputs.layer_arn }}
      skip_publish:
        description: 'Whether layer publication was skipped (true/false)'
        value: ${{ jobs.publish_layer.outputs.skip_publish }}

permissions:
  id-token: write
  contents: read

jobs:
  publish_layer:
    runs-on: ubuntu-latest
    outputs:
      layer_arn: ${{ steps.publish-layer.outputs.layer_arn }}
      skip_publish: ${{ steps.publish-layer.outputs.skip_publish }}

    steps:
      - name: Checkout repository for tools/scripts
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            tools/scripts
            tools/requirements.txt
          sparse-checkout-cone-mode: false
          
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r tools/requirements.txt


      - name: Download built layer
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact-name }}

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.OTEL_LAMBDA_LAYER_PUBLISH_ROLE_ARN }}
          role-duration-seconds: 1200
          aws-region: ${{ inputs.aws-region }}
          mask-aws-account-id: false

      - name: Publish Lambda Layer
        id: publish-layer
        env: # Pass only required inputs as environment variables
          # Keep the PY_BUILD_TAGS environment variable as that's handled specially inside the script
          PY_BUILD_TAGS: ${{ inputs.build-tags }}
        run: |
          # Call the script with CLI parameters instead of environment variables
          python3 tools/scripts/lambda_layer_publisher.py \
            --layer-name "${{ inputs.layer-name }}" \
            --artifact-name "${{ inputs.artifact-name }}" \
            --region "${{ inputs.aws-region }}" \
            --dynamodb-region "${{ inputs.dynamodb-region }}" \
            --architecture "${{ inputs.architecture }}" \
            --runtimes "${{ inputs.runtimes }}" \
            --release-group "${{ inputs.release-group }}" \
            --layer-version "${{ inputs.layer-version }}" \
            --distribution "${{ inputs.distribution }}" \
            --collector-version "${{ inputs.collector-version }}" \
            --make-public ${{ inputs.make-public }} \
            --build-tags "${{ inputs.build-tags }}" \
            --dry-run ${{ inputs.dry-run }}
